package io.jpress.model;

import io.jboot.db.annotation.Table;
import io.jpress.model.base.BaseAttachmentVideo;

import java.util.Date;

/**
 * Generated by JPress.
 */
@Table(tableName = "attachment_video", primaryKey = "id")
public class AttachmentVideo extends BaseAttachmentVideo<AttachmentVideo> {

    private static final long serialVersionUID = 1L;

    //阿里云
    public static final String CLOUD_TYPE_ALIYUN = "1";
    //腾讯云
    public static final String CLOUD_TYPE_QCLOUD = "2";
    //本地视频
    public static final String CLOUD_TYPE_LOCAL = "4";


    // 视频点播
    public static final String VIDEO_TYPE_VIDEO = "vod";
    //直播
    public static final String VIDEO_TYPE_LIVE = "live";
    //代码
    public static final String VIDEO_TYPE_CODE = "code";
    //本地
    public static final String VIDEO_TYPE_LOCAL = "local";


    public String getVideoTypeStr() {
        if(getVideoType() != null  &&  !getVideoType().equals("")){
            switch (getVideoType()) {
                case VIDEO_TYPE_VIDEO:
                    return "视频";
                case VIDEO_TYPE_LIVE:
                    return "直播";
                case VIDEO_TYPE_CODE:
                    return "代码";
                case VIDEO_TYPE_LOCAL:
                    return "本地";
                default:
                    return "--";
            }
        }else{
            return "--";
        }

    }

    public boolean isVideoType() {
        return getVideoType() != null && getVideoType().equals(VIDEO_TYPE_VIDEO);
    }

    public boolean isLiveType() {
        return getVideoType() != null && getVideoType().equals(VIDEO_TYPE_LIVE);
    }


    public boolean isCodeType() {
        return getVideoType() != null && getVideoType().equals(VIDEO_TYPE_CODE);
    }

    public boolean isLocalType() {
        return getVideoType() != null && getVideoType().equals(VIDEO_TYPE_LOCAL);
    }

    public String getDurationString() {
        return getTimeStringBySecond(getVodDuration());
    }

    public String getLiveTimeStr() {

        Date liveStartTime = getLiveStartTime();
        if (liveStartTime == null) {
            if(getVideoType().equals(VIDEO_TYPE_VIDEO)){
                return "视频";
            }else{
                return "未开始";
            }

        }

        long currentTimeMillis = System.currentTimeMillis();
        if (currentTimeMillis < liveStartTime.getTime()) {
            return "未开始";
//            return DateUtil.toString(liveStartTime, "dd日HH点mm");
        }

        Date liveEndTime = getLiveEndTime();
        if (liveEndTime == null) {
            return "未结束";
        }

        if (currentTimeMillis > liveEndTime.getTime()) {
            return "已结束";
        }

        if (currentTimeMillis > liveStartTime.getTime() && currentTimeMillis < liveEndTime.getTime()) {
            return "进行中";
        }

        return "未开始";
    }



    /**
     * 是否已经直播结束
     *
     * @return
     */
    public boolean isLiveEnd() {
        return getLiveEndTime() != null && System.currentTimeMillis() > getLiveEndTime().getTime();
    }

    /**
     * 是否正在直播中
     *
     * @return
     */
    public boolean isLiving() {
        Date liveStartTime = getLiveStartTime();
        return liveStartTime != null && liveStartTime.getTime() < System.currentTimeMillis() && !isLiveEnd();
    }

    /**
     * 直播未开始
     * @return
     */
    public boolean isNoStart(){
        Date liveStartTime = getLiveStartTime();
        return liveStartTime != null && liveStartTime.getTime() > System.currentTimeMillis();
    }


    public static String getTimeStringBySecond(Long duration) {
        if (duration == null || duration <= 0) {
            return "";
        }

        if (duration < 60) {
            return "00:00:" + appendZero(Math.toIntExact(duration));
        }

        if (duration < 3600) {
            int minute = (int) (duration / 60);
            int second = (int) (duration % 60);
            return "00:" + appendZero(minute) + ":" + appendZero(second);
        }

        int hour = (int) (duration / (3600));
        int minute = (int) ((duration - (hour * 3600)) / 60);
        int second = (int) ((duration - (hour * 3600)) % 60);

        return appendZero(hour) + ":" + appendZero(minute) + ":" + appendZero(second);
    }

    private static String appendZero(int value) {
        return value >= 10 ? String.valueOf(value) : "0" + value;
    }

	
}

